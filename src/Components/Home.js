import React from 'react';
import "./stylesYoga.css";
import TypesOf from "./images/typesOdCH.png";
import ATFL from "./images/ATFL.jpg"

const Home = () => {
  return (
    <div className="yoga">
        <img  src={ATFL} alt="Type of CH" style={{width:"100%"}}/>
        <h1 style={{textAlign: 'center'}}>Chomsky Hierarchy</h1>
        <p>Understanding the Chomsky Hierarchy hinges on comprehending formal grammar. Enclosed within language theory, which is a critical branch of computer science, formal grammar refers to a set of rules responsible for generating the syntax of a language.</p>        
        <div className="verticalLine">
            <h3 style={{color:"#ff0000"}}>Definition</h3>
            <p>
            Formal grammar can be represented as G = (N,Σ,P,S) <br/>
 where:</p>
        </div>
        <div>
            <ul>
                <li><i>N :  is a set of nonterminal symbols</i></li>
                <li><i>Σ : is the alphabet or set of terminal symbols.</i></li>
                <li><i>P : is a collection of production rules that define how sentences are formed from the nonterminals and terminals.</i></li>
                <li><i>S : is the start symbol</i></li>
            </ul>
        </div>
        <p>
        The Chomsky Hierarchy is made up of four types of formal grammars. Each class of grammar produces a corresponding class of languages, also ordered in a hierarchical structure.
        </p>
        <div className="tableOfContent">
            <h2>Table Of Contents</h2>
            <h3>1. <a href='#C1' style={{color:'black'}}>Origin of Chomsky Hierarchy</a></h3>
            <h3>2. <a href='#C2' style={{color:'black'}}>Importance of Chomsky Hierarchy in Computer Science</a></h3>
            <h3>3. <a href='#C3' style={{color:'black'}}>Essential Terms Related to Chomsky Hierarchy in Theory of Computation</a></h3>
            <h3>4. <a href='#C4' style={{color:'black'}}>Type 0 - Unrestricted Grammar </a></h3>
            <h3>5. <a href='#C5' style={{color:'black'}}>Type 1 - Context-Sensitive Grammar</a></h3>
            <h3>6. <a href='#C6' style={{color:'black'}}>Type 2 - Context-Free Grammar</a></h3>
            <h3>7. <a href='#C7' style={{color:'black'}}>Type 3 - Regular Grammar</a></h3>
            <h3>8. <a href='#C8' style={{color:'black'}}>Conclusion</a></h3>
        </div>
        <h2 id='C1' style={{textAlign:'left'}}>Origin of Chomsky Hierarchy</h2>
        <p>
        The Chomsky Hierarchy bears the name of its creator, Noam Chomsky, a well-known linguist and cognitive scientist. In 1956, Chomsky formulated this stunningly meaningful arrangement of language classifications, founded on the complexity of their production rules.
        </p>
        <center>
        <img  src={TypesOf} alt="Type of CH" />
        </center>
        <br></br>
        <h2 id='C2' style={{textAlign:'left'}}>Importance of Chomsky Hierarchy in Computer Science</h2>
        <p>
        The Chomsky Hierarchy's significance in Computer Science is axiomatic. It proposes a framework to understand the range of potential languages and their respective complexities, crucial knowledge considering that every computer programming language is grounded in these grammatical rules.
        </p>
        <div className="roundedBorder">
            <h3 style={{color:"#ff0000"}}>Deep Dive</h3>
            <p>
            The Chomsky Hierarchy also plays an essential role in automata theory, compiling and even artificial intelligence. For instance, regular languages (Type 3 in the hierarchy) directly relate to finite automata, while context-free languages (Type 2) correspond to pushdown automata.
            </p>
        </div>
        <p>
        With a clear understanding of the formal grammar underpinning different languages, you could potentially design more efficient algorithms or even create a new computer programming language. The Chomsky Hierarchy indeed elucidates the reach, potential, and structure of languages in a way that no other principle can.
        </p>
        <h2 id='C3' style={{textAlign:'left'}}>Essential Terms Related to Chomsky Hierarchy in Theory of Computation</h2>
        <p>
        The understanding of several terms is crucial to fully grasp the Chomsky Hierarchy and its implications on computation theory:
        </p>
        <br/>
        <div className="verticalLine">
            <h3 style={{color:"#ff0000"}}>Definition</h3>
            <p>
            <b>FormalLanguages:</b>A formal language is a collection of words or sentences, formed according to specific rules. These languages are recognised or generated by their corresponding grammars.
            </p>
        </div>
        <div className="verticalLine">
            <h3 style={{color:"#ff0000"}}>Definition</h3>
            <p>
            <b>Automata:</b>An Automaton is an abstract self-operating machine or computing model capable of performing computations or recognising patterns. Finite automata, pushdown automata, linear bound automata and Turing machines are different types of automata.
            </p>
        </div>
        <div className="verticalLine">
            <h3 style={{color:"#ff0000"}}>Definition</h3>
            <p>
            <b>Turing Machine:</b>Named after Alan Turing, a Turing machine is a theoretical model of computation and information processing. It can simulate any computer algorithm, given sufficient time and resources, and is used in different aspects of computation theory such as determining the scope of what can be computed.
            </p>
        </div>
        <div className="verticalLine">
            <h3 style={{color:"#ff0000"}}>Definition</h3>
            <p>
            <b>Pushdown Automata:</b>A pushdown automaton is an automaton that employs a stack to process context-free languages. The stack provides additional memory, enabling the automaton to track more complex patterns than a finite automaton.
            </p>
        </div>
        <p>
        Understanding these concepts and their interactions uncovers the beauty of the Chomsky Hierarchy, and illuminates the foundation of the theory of computation.
        </p>
        <h2 id='C4' style={{textAlign:'left'}}>Type 0 - Unrestricted Grammar:</h2>
        <p>
        Type-0 grammars include all formal grammar. Type 0 grammar languages are recognized by turing machine. These languages are also known as the Recursively Enumerable languages. 
        </p>
        <p>
        Grammar Production in the form of α -&gt; β where
        </p>
        <div className="roundedBorder">
            <h3>α</h3>
            <p>
            is ( V + T)* V ( V + T)* 
            </p>
            <p>
            V : Variables 
            </p>
            <p>
            T : Terminals.
            </p>
        </div>
        <div className="roundedBorder">
            <h3>β</h3>
            <p>
            is ( V + T )*. 
            </p>
        </div>
        <p>
        In type 0 there must be at least one variable on the Left side of production. 
        </p>
        <p>
        For example:
        </p>
        <div className="roundedBorder">
            <p>
            Sab --&gt; ba  
            </p>
            <p>
            A --&gt; S
            </p>
        </div>
        <p>
        Here, Variables are S, A, and Terminals a, b.
        </p>
        <h2 id='C5' style={{textAlign:'left'}}>Type 1 - Context-Sensitive Grammar:</h2>
        <p>
        Type-1 grammars generate context-sensitive languages. The language generated by the grammar is recognized by the Linear Bound Automata 
        </p>
        <p>In Type 1:</p>
        <ul>
            <li>First of all Type 1 grammar should be Type 0. </li>
            <li>Grammar Production in the form of </li>
        </ul>
        <div className="roundedBorder">
            <p>
            α -&gt; β  
            </p>
            <p>
            |α| &lt;= |β|
            </p>
        </div>
        <p>
        That is the count of symbol in α is less than or equal to β        
        </p>
        <p>
        Also ?  ? (V + T)^+
        </p>
        <p>
        i.e. ? can not be ?
        </p>
        <p>
        For Example:
        </p>
        <div className="roundedBorder">
            <p>
            S --&gt; AB  
            </p>
            <p>
            AB --&gt; abc
            </p>
            <p>
            B --&gt; b
            </p>
        </div>
        <h2 id='C6' style={{textAlign:'left'}}>Type 2 - Context-Free Grammar: </h2>
        <p>
        Type-2 grammars generate context-free languages. The language generated by the grammar is recognized by a Pushdown automata.
        </p>
        <p>
        In Type 2:
        </p>
        <ul>
            <li>First of all, it should be Type 1. </li>
            <li>The left-hand side of production can have only one variable and there is no restriction on β </li>
        </ul>
        <p>
            |α| = 1
        </p>
        <p>
        For Example:
        </p>
        <div className="roundedBorder">
            <p>
            S --&gt; AB  
            </p>
            <p>
            A --&gt; a
            </p>
            <p>
            B --&gt; b
            </p>
        </div>
        <h2 id='C7' style={{textAlign:'left'}}>Type 3 - Regular Grammar: </h2>
        <p>
        Type-3 grammars generate regular languages. These languages are exactly all languages that can be accepted by a finite-state automaton. Type 3 is the most restricted form of grammar. 
        </p>
        <p>
        Type 3 should be in the given form only : 
        </p>
        <div className="roundedBorder">
            <p>V --&gt; VT / T (left-regular grammar)</p>
            <p> (or)</p>
            <p>V --&gt; TV /T (right-regular grammar)</p>
        </div>
        <p>For example:</p>
        <div className="roundedBorder">
            <p>S --&gt; a</p>
        </div>
        <p>The above form is called strictly regular grammar.</p>
        <p>There is another form of regular grammar called extended regular grammar. In this form:</p>
        <div className="roundedBorder">
            <p>V --&gt; VVT* / T* (extended left-regular grammar)</p>
            <p> (or)</p>
            <p>V --&gt; T*V /T*  (extended right-regular grammar)</p>
        </div>
        <p>For example : </p>
        <div className="roundedBorder">
            <p>S --&gt; ab.</p>
        </div>
        <h2 id='C8' style={{textAlign:'left'}}>Conclusion</h2>
        <p>
            In summary, the Chomsky hierarchy offers a systematic classification of formal grammars, crucial for understanding language theory and computational linguistics. From basic regular grammars to recursively enumerable grammars, each level represents varying degrees of complexity and expressive power. By grasping these distinctions, researchers and developers can optimize algorithms, design robust programming languages, and propel advancements in artificial intelligence and natural language processing.
        </p>
    </div>
  )
}

export default Home;
